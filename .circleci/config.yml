defaults: &defaults
  environment:
    GOOGLE_PROJECT_ID: planet-4-151612
  docker:
    - image: gcr.io/planet-4-151612/circleci-base:0.3.2
  working_directory:  /home/circleci/app

version: 2

jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Initialise workspace
          command: |
            # Ensure all shell scripts are executable
            chmod +x ./bin/*.sh

            # Setup
            ./bin/setup_workspace.sh

      - run:
          name: Update build numbers
          command: |
            # Updates Dockerfile and README data with CI variables
            curl -sS https://gist.githubusercontent.com/27Bslash6/b124df87ac2c5ce44f6736b1d4af124a/raw/d5675017a496f0cc966a9fc5f86266eccff3643f/circleci_update_build_numbers.sh -o /tmp/update_build_numbers.sh
            chmod +x /tmp/update_build_numbers.sh
            /tmp/update_build_numbers.sh

      - setup_remote_docker

      - run:
          name: Configure gcloud
          command: |
            # Configure gcloud authentication
            ${HOME}/scripts/activate-gcloud-account.sh

      - run:
          name: Sending build request to Google Container Builder
          command: |
            # Perform the build on GCP
            ./build.sh -r

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var


  test:
    <<: *defaults
    steps:

      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Setup test results
          command: |
            mkdir -p /tmp/test-results

      - run:
          name: Restore container image
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker pull gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM}

      - run:
          name: Test PHP
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker run --rm gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} php -v > /tmp/test-results/php_version.txt
            grep -q 'PHP 7' /tmp/test-results/php_version.txt
            cat /tmp/test-results/php_version.txt

      - run:
          name: Test gcloud
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker run --rm gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} ${HOME}/google-cloud-sdk/bin/gcloud -v > /tmp/test-results/gcloud_version.txt
            grep -q 'kubectl' /tmp/test-results/gcloud_version.txt
            cat /tmp/test-results/gcloud_version.txt

      - store_test_results:
          path: /tmp/test-results


  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Configure gcloud
          command: |
            ${HOME}/scripts/activate-gcloud-account.sh

      - setup_remote_docker

      - run:
          name: Restore container image
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker pull gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM}

      - deploy:
          name: Deploy latest tag on master branch
          command: |
            set -x

            # Hacky workaround for CircleCI checking commits out with detached HEAD

            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            if [[ "${CIRCLE_BRANCH}" = "master" ]] ||
               [[ "$(cat /tmp/workspace/var/circle-branch-name)" = "master" ]]
            then
              docker tag gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:latest
              ${HOME}/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:latest
            fi


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      # Only run deploy job for tagged releases, any branch
      - deploy:
          requires:
            - test
          filters:
            tags:
              only: /.*/
