defaults: &defaults
  environment:
    GOOGLE_PROJECT_ID: planet-4-151612
  docker:
    - image: gcr.io/planet-4-151612/circleci-base:latest
  working_directory:  /home/circleci/app

version: 2

jobs:
  build:
    <<: *defaults
    steps:
      - setup_remote_docker

      - run:
          name: Versions
          command: |
            docker version
            docker-compose version

      - checkout

      - run:
          name: Initialise workspace
          command: |
            # Ensure all shell scripts are executable
            chmod +x ./bin/*.sh

            # Store current build number for future jobs
            mkdir -p /tmp/workspace/var
            echo "${CIRCLE_BUILD_NUM}" > /tmp/workspace/var/circle-build-num

            # Show bash version
            bash --version

            # Show kernel information
            uname -a

            # Not all distributions will have lsb_release
            if [[ $(type -P "lsb_release") ]]
            then
              lsb_release -a
            fi

            # bats version
            bats -v

            # ack version
            ack --version

      - run:
          name: Update build numbers
          command: |
            # Updates Dockerfile and README data with CI variables

            # If the build url isn't set, we're building locally so
            if [[ -z "${CIRCLE_BUILD_URL}" ]]
            then
              # Don't attempt to update the repository
              echo "Local build, skipping repository update..."
              exit 0
            fi

            if [[ -z "${CIRCLE_BRANCH}" ]] && [[ "${CIRCLE_TAG}" ]]
            then
              # Find the branch associated with this commit
              # Why is this so hard, CircleCI?
              git remote update
              # Find which remote branch contains the current commit
              CIRCLE_BRANCH=$(git branch -r --contains ${CIRCLE_SHA1} | grep -v 'HEAD' | awk '{split($1,a,"/"); print a[2]}')
              # Checkout that branch / tag
              git checkout ${CIRCLE_BRANCH}
              if [[ "$(git rev-parse HEAD)" != "${CIRCLE_SHA1}" ]]
              then
                >&2 echo "Found the wrong commit!"
                >&2 echo "Wanted: ${CIRCLE_SHA1}"
                >&2 echo "Got:    $(git rev-parse HEAD)"
                >&2 echo "Not updating build details in repository, continuing ..."
                exit 0
              fi
            fi
            echo "${CIRCLE_BRANCH}" > /tmp/workspace/var/circle-branch-name
            export CIRCLE_BRANCH

            # Build without arguments to update Dockerfile from template
            ./bin/build.sh

            # Exit early if no changes to write
            git diff-index --quiet HEAD -- && exit 0

            # Configure git user
            git config user.email "circleci-bot@greenpeace.org"
            git config user.name "CircleCI Bot"
            git config push.default simple

            # Add changes
            git add .
            # Get previous commit message and append a message, skipping CI
            OLD_MSG=$(git log --format=%B -n1)
            git commit -m ":robot: $OLD_MSG" -m "- update build numbers [skip ci]"
            # Push updated files to the repo
            git push --force-with-lease --set-upstream origin ${CIRCLE_BRANCH}

      - run:
          name: Configure gcloud
          command: |
            # Configure gcloud authentication
            ${HOME}/scripts/activate-gcloud-account.sh

      - run:
          name: Sending build request to Google Container Builder
          command: |
            # Perform the build on GCP
            make build

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var


  test:
    <<: *defaults
    steps:

      - attach_workspace:
          at: /tmp/workspace

      - setup_remote_docker

      - run:
          name: Setup test results
          command: |
            mkdir -p /tmp/test-results

      - run:
          name: Pull new image
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker pull gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM}

      - run:
          name: Test PHP
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker run --rm gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} php -v > /tmp/test-results/php_version.txt
            grep -q 'PHP 7' /tmp/test-results/php_version.txt
            cat /tmp/test-results/php_version.txt

      - run:
          name: Test gcloud
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker run --rm gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} gcloud -v > /tmp/test-results/gcloud_version.txt
            grep -q 'kubectl' /tmp/test-results/gcloud_version.txt
            cat /tmp/test-results/gcloud_version.txt

      - store_test_results:
          path: /tmp/test-results


  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Configure gcloud
          command: |
            ${HOME}/scripts/activate-gcloud-account.sh

      - setup_remote_docker

      - run:
          name: Restore container image
          command: |
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            docker pull gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM}

      - deploy:
          name: Deploy latest tag on master branch
          command: |
            set -x

            # FIXME Hacky workaround for CircleCI checking commits out with detached HEAD
            export CIRCLE_BUILD_NUM=$(cat /tmp/workspace/var/circle-build-num)
            if [[ "${CIRCLE_BRANCH}" = "master" ]] ||
               [[ "$(cat /tmp/workspace/var/circle-branch-name)" = "master" ]]
            then
              docker tag gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:build-${CIRCLE_BUILD_NUM} gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:latest
              gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/circleci-base:latest
            fi


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      # Only run deploy job for tagged releases, any branch
      - deploy:
          requires:
            - test
          filters:
            tags:
              only: /.*/
